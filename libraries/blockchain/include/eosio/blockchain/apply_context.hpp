#pragma once
#include <eosio/blockchain/database.hpp>
#include <eosio/blockchain/controller.hpp>
#include <sstream>

namespace eosio { namespace blockchain {

   struct action_result {
      action_notice                  act;
      string                         log;
      vector<action_result>          forward_request;
      vector<action_result>          queued_actions;
      vector<deferred_transaction>   deferred_transactions;
      flat_set<account_name>         write_scopes_accessed;
      flat_set<account_name>         read_scopes_accessed;
   };

   /**
    *  All of the information that is available to
    *  the wasm interface during execution of a transaction as well
    *  as all of the state generated by executing the transaction.
    */
   class apply_context {
      public:
         apply_context( const signed_transaction& t, transaction_handle& h )
         :trx(t),db(h){}

         const signed_transaction&    trx;
         transaction_handle&          db;

         account_name                 deferred_creator; ///< if this is a deferred transaction

         action_result*               current_action = nullptr;
         vector<action_result>        results;
   };


} } /// eosio::blockchain
